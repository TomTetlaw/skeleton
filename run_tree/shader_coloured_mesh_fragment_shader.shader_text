                                         INOUT vec2 frag_tex_coord;
INOUT vec4 frag_colour;
INOUT vec3 frag_position;
INOUT vec3 frag_normal;
INOUT vec3 frag_tangent;
INOUT vec4 frag_light_space_position;

uniform vec4 screen_params;
uniform vec3 camera_position;
uniform vec3 mesh_min_bounds;
uniform vec3 mesh_max_bounds;
uniform vec3 light_pos;
uniform vec3 light_dir;

uniform sampler2D shadow_map;

uniform sampler2D diffuse_map;
uniform sampler2D normal_map;
uniform sampler2D rmaoh_map;
uniform float material_scale;

#define PI 3.14159265359

struct Material {
    float roughness;
    float metallic;
    float ambient_occlusion;
};

float shadow_calculation(vec4 light_space_position, vec3 object_normal, vec3 light_dir)
{
    vec3 proj_coord = light_space_position.xyz / light_space_position.w;
    proj_coord = proj_coord * 0.5 + 0.5;
    float closest = texture(shadow_map, proj_coord.xy).r; 
    float current = proj_coord.z;
    float bias = max(0.05 * (1.0 - dot(object_normal, light_dir)), 0.005);
    float shadow = current - bias > closest  ? 1.0 : 0.0;
    return shadow;
}  

float distribution_ggx(vec3 N, vec3 H, float roughness) {
    float a2 = roughness * roughness * roughness * roughness;
    float NdotH = max (dot (N, H), 0.0);
    float denom = (NdotH * NdotH * (a2 - 1.0) + 1.0);
    return a2 / (PI * denom * denom);
}

float geometry_schlick_ggx(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;
    return NdotV / (NdotV * (1.0 - k) + k);
}

float geometry_smith(vec3 N, vec3 V, vec3 L, float roughness) {
    return geometry_schlick_ggx(max (dot (N, L), 0.0), roughness) *
        geometry_schlick_ggx(max (dot (N, V), 0.0), roughness);
}

vec3 fresnel_schlick(float cos_theta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(1.0 - cos_theta, 5.0);
}

vec3 lighting(vec4 light_space_position, vec3 object_pos, vec3 object_normal, vec3 object_colour, Material material, vec3 camera_pos, vec3 light_pos, vec3 light_colour) {
    vec3 N = normalize(object_normal);
    vec3 V = normalize(camera_pos - object_pos);
    
    vec3 F0 = vec3(.04);
    F0 = mix(F0, object_colour, material.metallic);
    
    vec3 L = normalize(light_pos - object_pos);
    vec3 H = normalize(V + L);
    float distance = length(light_pos - object_pos);
    float attenuation = 1.0 / (distance * distance);
    vec3 radiance = light_colour * attenuation;
    
    float NDF = distribution_ggx(N, H, material.roughness);
    float G = geometry_smith(N, V, L, material.roughness);
    vec3 F = fresnel_schlick(max(dot(H, V), 0.0), F0);
    
    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - material.metallic;
    
    vec3 numerator = NDF * G * F;
    float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
    vec3 specular = numerator / denominator;
    
    float NdotL = max(dot(N, L), 0.0);
    vec3 Lo = (kD * object_colour / PI + specular) * radiance * NdotL;
    
    float shadow = shadow_calculation(light_space_position, object_normal, light_dir);
    
    vec3 ambient = vec3(0.03) * object_colour * material.ambient_occlusion;
    vec3 colour = ambient + Lo * (1.0 - shadow);
    
    colour = colour / (colour + vec3(1.0));
    colour = pow(colour, vec3(1.0/2.2));
    
    return colour;
}

vec4 sample(sampler2D tex, vec2 tex_coord) {
    return texture(tex, tex_coord);
    
    vec2 size = vec2(textureSize(tex, 0));
    tex_coord *= size;
    vec2 duv = fwidth(tex_coord);
    tex_coord = floor(tex_coord) + vec2(0.5) + clamp((fract(tex_coord) - vec2(0.5) + duv)/duv, 0, 1);
    tex_coord /= size;
    
    return texture(tex, tex_coord);
}

vec2 get_screen_size(mat4 MVP, vec3 min_bounds, vec3 max_bounds, vec2 screen_size) {
    vec4 clip_min = MVP * vec4(min_bounds, 1);
    vec4 clip_max = MVP * vec4(max_bounds, 1);
    
    vec3 ndc_min = clip_min.xyz / clip_min.w;
    vec3 ndc_max = clip_max.xyz / clip_max.w;
    
    vec2 screen_min = (ndc_min.xy * 0.5 + 0.5) * screen_size;
    vec2 screen_max = (ndc_max.xy * 0.5 + 0.5) * screen_size;
    
    return screen_max - screen_min;
}

vec4 snap_ps1(mat4 MVP, vec4 position, vec3 min_bounds, vec3 max_bounds, vec2 screen_size) {
    vec2 res = vec2(50);
    
    vec2 snapped = position.xy / position.w;
    snapped.x = floor(snapped.x * res.x) / res.x;
    snapped.y = floor(snapped.y * res.y) / res.y;
    snapped *= position.w;
    return vec4(snapped, position.zw);
}

vec3 unpack_normal(vec2 normal) {
    float z = sqrt(1.0 - dot(normal, normal));
    return vec3(normal.xy, z);
}

vec3 unpack_tangent(vec2 tangent) {
    float z = sqrt(1.0 - dot(tangent, tangent));
    return vec3(tangent.xy, z);
}


#if VERTEX_SHADER
                                         layout(location = 0) in vec3 vertex_position;
                                         layout(location = 1) in vec2 vertex_tex_coord;
                                         layout(location = 2) in vec4 vertex_tangent_normal;
                                         layout(location = 3) in ivec4 bone_ids;
                                         layout(location = 4) in vec3 bone_weights;
                                         
                                         const int MAX_BONES  = 1000;
                                         const int MAX_WEIGHTS = 4;
                                         
                                         layout (std140) uniform Skinning_Transforms
                                         {
                                             mat4 skinning_transforms[MAX_BONES];
                                         };
                                         
                                         uniform mat4 transform_matrix;
                                         uniform mat4 view_matrix;
                                         uniform mat4 projection_matrix;
                                         uniform mat4 light_matrix;
                                         uniform vec4 base_colour;
                                         
                                         void main() {
                                             vec3 position = vertex_position;
                                             vec3 normal = unpack_normal(vertex_tangent_normal.xy);
                                             vec3 tangent = unpack_tangent(vertex_tangent_normal.zw);
                                             
                                             vec3 model_position = vec3(0);
                                             vec3 model_normal = vec3(0);
                                             vec3 model_tangent = vec3(0);
                                             
                                             if (bone_ids.x == -1) {
                                                 model_position = vertex_position;
                                                 model_normal = normal;
                                                 model_tangent = tangent;
                                             }
                                             
                                             for (int i = 0; i < MAX_WEIGHTS && bone_ids[i] != -1; i += 1) {
                                                 int bone_id = bone_ids[i];
                                                 float weight = 0;
                                                 if (i == MAX_WEIGHTS - 1) {
                                                     weight = 1.0 - (bone_weights.x+bone_weights.y+bone_weights.z);
                                                 } else {
                                                     weight = bone_weights[i];
                                                 }
                                                 
                                                 mat4 skinning_matrix = skinning_transforms[bone_id];
                                                 
                                                 vec3 pose_position = (skinning_matrix * vec4(position, 1)).xyz;
                                                 vec3 pose_normal = (skinning_matrix * vec4(normal, 1)).xyz;
                                                 vec3 pose_tangent = (skinning_matrix * vec4(tangent, 1)).xyz;
                                                 
                                                 model_position += pose_position * weight;
                                                 model_normal += pose_normal * weight;
                                                 model_tangent += pose_tangent * weight;
                                             }
                                             
                                             mat4 MVP = projection_matrix * view_matrix * transform_matrix;
                                             vec4 ndc_position = MVP * vec4(model_position, 1);
                                             
                                             gl_Position = ndc_position;// snap_ps1(MVP, ndc_position, mesh_min_bounds, mesh_max_bounds, screen_params.xy);
                                             
                                             vec4 world_position = transform_matrix * vec4(model_position, 1);
                                             frag_position = world_position.xyz;
                                             frag_light_space_position = light_matrix * vec4(model_position, 1);
                                             frag_normal = model_normal.xyz;
                                             frag_tangent = model_tangent.xyz;
                                             frag_tex_coord = vertex_tex_coord;
                                             frag_colour = base_colour;
                                         }
                                         
#endif
                                         
#if FRAGMENT_SHADER
                                         
                                         out vec4 output_colour;
                                         
                                         void main() {
                                             vec2 tex_coord = frag_tex_coord * material_scale;
                                             tex_coord = vec2(tex_coord.x, tex_coord.y);
                                             
                                             vec3 diffuse = pow(sample(diffuse_map, tex_coord).rgb, vec3(2.2));
                                             
                                             vec3 colour = diffuse * frag_colour.xyz;
                                             
                                             vec3 bitangent = cross(frag_normal, frag_tangent);
                                             mat3 TBN = mat3(frag_tangent, bitangent, frag_normal);
                                             vec3 normal = sample(normal_map, tex_coord).xyz * 2 - 1;
                                             normal = normalize(TBN * normal);
                                             normal = normalize(mix(frag_normal, normal, 0.5));
                                             
                                             vec4 rmaoh = sample(rmaoh_map, tex_coord);
                                             
                                             Material mat;
                                             mat.roughness = 1 * rmaoh.r;
                                             mat.metallic = 1 * rmaoh.g;
                                             mat.ambient_occlusion = 1 * rmaoh.b;
                                             
                                             vec3 light_pos = camera_position;//vec3(0, 10, 0);
                                             vec3 light_colour = vec3(1.0, 1.0, 0.8) * 500;
                                             
                                             colour = lighting(frag_light_space_position, frag_position, normal, colour, mat, camera_position, light_pos, light_colour);
                                             
                                             output_colour = vec4(colour, 1);
                                         }
                                         
#endif

#version 330 core
#define VERTEX_SHADER 0
#define FRAGMENT_SHADER 1
#define INOUT in
#define FLAT_INOUT flat in

